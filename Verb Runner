<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verb Runner - Subway Surfers Style</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(to bottom, #1a2980, #26d0ce);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .container {
            width: 100%;
            max-width: 800px;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 20px;
        }
        
        h1 {
            font-size: 2.8rem;
            text-shadow: 3px 3px 0 #000;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .game-container {
            background: rgba(0, 0, 0, 0.7);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            position: relative;
            overflow: hidden;
        }
        
        .game-ui {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            z-index: 10;
            position: relative;
        }
        
        .score-board, .lives-board {
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 10px;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
        }
        
        .score-board i, .lives-board i {
            margin-right: 10px;
            color: #ffcc00;
        }
        
        .city-background {
            height: 400px;
            background: linear-gradient(to bottom, #2c3e50, #4ca1af);
            border-radius: 10px;
            position: relative;
            overflow: hidden;
            border: 3px solid #34495e;
        }
        
        .road {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 100px;
            background: #7f8c8d;
            display: flex;
            justify-content: space-around;
            align-items: center;
        }
        
        .lane {
            width: 30%;
            height: 5px;
            background: #ecf0f1;
            position: relative;
        }
        
        .lane::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 5px;
            background: repeating-linear-gradient(
                90deg,
                transparent,
                transparent 20px,
                #ffcc00 20px,
                #ffcc00 40px
            );
            animation: road-move 1s linear infinite;
        }
        
        @keyframes road-move {
            0% { transform: translateX(0); }
            100% { transform: translateX(-40px); }
        }
        
        .player {
            width: 50px;
            height: 70px;
            background: #ff6b6b;
            position: absolute;
            bottom: 110px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 10px 10px 5px 5px;
            transition: left 0.2s ease;
            z-index: 5;
        }
        
        .player::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            background: #ff4757;
            border-radius: 50%;
            top: -10px;
            left: 15px;
        }
        
        .obstacle {
            width: 60px;
            height: 60px;
            background: #ff9f43;
            position: absolute;
            bottom: 110px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            animation: obstacle-move 3s linear infinite;
        }
        
        @keyframes obstacle-move {
            0% { transform: translateY(-500px); }
            100% { transform: translateY(500px); }
        }
        
        .buildings {
            position: absolute;
            bottom: 210px;
            width: 100%;
            height: 190px;
            display: flex;
            justify-content: space-around;
        }
        
        .building {
            width: 22%;
            background: #34495e;
            border-radius: 5px 5px 0 0;
            position: relative;
        }
        
        .building::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 20px;
            background: #2c3e50;
            bottom: 0;
        }
        
        .window {
            position: absolute;
            width: 8px;
            height: 12px;
            background: #f1c40f;
            border-radius: 2px;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }
        
        .control-btn {
            padding: 12px 25px;
            background: #1e90ff;
            border: none;
            border-radius: 50px;
            color: white;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .control-btn:hover {
            background: #3742fa;
            transform: translateY(-3px);
        }
        
        .control-btn i {
            margin-right: 8px;
        }
        
        .verb-display {
            text-align: center;
            margin: 15px 0;
            font-size: 1.4rem;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 0.9rem;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            color: #ffcc00;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 5px;
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 20;
            display: none;
        }
        
        .game-over h2 {
            font-size: 3rem;
            color: #ff6b6b;
            margin-bottom: 20px;
        }
        
        .restart-btn {
            padding: 15px 30px;
            background: #1e90ff;
            border: none;
            border-radius: 50px;
            color: white;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .restart-btn:hover {
            background: #3742fa;
            transform: scale(1.05);
        }
        
        @media (max-width: 600px) {
            h1 {
                font-size: 2rem;
            }
            
            .city-background {
                height: 300px;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .control-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Verb Runner</h1>
            <p class="subtitle">Dodge obstacles while learning past tense verbs!</p>
        </header>
        
        <div class="game-container">
            <div class="game-ui">
                <div class="score-board">
                    <i class="fas fa-star"></i>
                    <span id="score">0</span>
                </div>
                <div class="lives-board">
                    <i class="fas fa-heart"></i>
                    <span id="lives">3</span>
                </div>
            </div>
            
            <div class="verb-display" id="verb-display">
                Verb: <span id="current-verb">run</span> â†’ Past: <span id="past-verb">ran</span>
            </div>
            
            <div class="city-background">
                <div class="buildings">
                    <div class="building" id="b1"></div>
                    <div class="building" id="b2"></div>
                    <div class="building" id="b3"></div>
                    <div class="building" id="b4"></div>
                </div>
                
                <div class="player" id="player"></div>
                
                <div class="road">
                    <div class="lane"></div>
                    <div class="lane"></div>
                    <div class="lane"></div>
                </div>
                
                <div class="game-over" id="game-over">
                    <h2>Game Over</h2>
                    <p>Your score: <span id="final-score">0</span></p>
                    <button class="restart-btn" id="restart-btn">Play Again</button>
                </div>
            </div>
            
            <div class="controls">
                <button class="control-btn" id="left-btn"><i class="fas fa-arrow-left"></i> Left</button>
                <button class="control-btn" id="right-btn">Right <i class="fas fa-arrow-right"></i></button>
            </div>
            
            <div class="instructions">
                <h3>How to Play:</h3>
                <ul>
                    <li>Use LEFT and RIGHT arrows to move your character</li>
                    <li>Dodge the obstacles while learning past tense verbs</li>
                    <li>Each correct answer gives you points</li>
                    <li>Get 3 wrong answers and the game is over</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Game elements
            const player = document.getElementById('player');
            const scoreElement = document.getElementById('score');
            const livesElement = document.getElementById('lives');
            const verbDisplay = document.getElementById('current-verb');
            const pastVerbDisplay = document.getElementById('past-verb');
            const gameOverScreen = document.getElementById('game-over');
            const finalScoreElement = document.getElementById('final-score');
            const restartBtn = document.getElementById('restart-btn');
            
            // Game state
            let score = 0;
            let lives = 3;
            let playerPosition = 1; // 0: left, 1: center, 2: right
            let gameActive = true;
            
            // Verbs data - irregular and regular
            const verbs = [
                { present: "run", past: "ran", type: "irregular" },
                { present: "walk", past: "walked", type: "regular" },
                { present: "eat", past: "ate", type: "irregular" },
                { present: "jump", past: "jumped", type: "regular" },
                { present: "swim", past: "swam", type: "irregular" },
                { present: "play", past: "played", type: "regular" },
                { present: "go", past: "went", type: "irregular" },
                { present: "talk", past: "talked", type: "regular" },
                { present: "see", past: "saw", type: "irregular" },
                { present: "ask", past: "asked", type: "regular" }
            ];
            
            let currentVerbIndex = 0;
            
            // Initialize the game
            function initGame() {
                score = 0;
                lives = 3;
                playerPosition = 1;
                gameActive = true;
                
                updateScore();
                updateLives();
                updateVerb();
                updatePlayerPosition();
                
                gameOverScreen.style.display = 'none';
                
                // Add windows to buildings
                addWindows();
            }
            
            // Add windows to buildings
            function addWindows() {
                for (let i = 1; i <= 4; i++) {
                    const building = document.getElementById('b' + i);
                    building.innerHTML = '';
                    
                    for (let j = 0; j < 12; j++) {
                        const window = document.createElement('div');
                        window.className = 'window';
                        window.style.left = Math.random() * 80 + 10 + '%';
                        window.style.top = Math.random() * 80 + 10 + '%';
                        building.appendChild(window);
                    }
                }
            }
            
            // Update the score display
            function updateScore() {
                scoreElement.textContent = score;
            }
            
            // Update the lives display
            function updateLives() {
                livesElement.textContent = lives;
            }
            
            // Update the verb display
            function updateVerb() {
                const verb = verbs[currentVerbIndex];
                verbDisplay.textContent = verb.present;
                pastVerbDisplay.textContent = verb.past;
            }
            
            // Update player position
            function updatePlayerPosition() {
                const positions = ['30%', '50%', '70%'];
                player.style.left = positions[playerPosition];
            }
            
            // Move player left
            function moveLeft() {
                if (playerPosition > 0) {
                    playerPosition--;
                    updatePlayerPosition();
                }
            }
            
            // Move player right
            function moveRight() {
                if (playerPosition < 2) {
                    playerPosition++;
                    updatePlayerPosition();
                }
            }
            
            // Handle game over
            function gameOver() {
                gameActive = false;
                finalScoreElement.textContent = score;
                gameOverScreen.style.display = 'flex';
            }
            
            // Handle keyboard input
            document.addEventListener('keydown', function(e) {
                if (!gameActive) return;
                
                if (e.key === 'ArrowLeft') {
                    moveLeft();
                } else if (e.key === 'ArrowRight') {
                    moveRight();
                }
            });
            
            // Button event listeners
            document.getElementById('left-btn').addEventListener('click', moveLeft);
            document.getElementById('right-btn').addEventListener('click', moveRight);
            restartBtn.addEventListener('click', initGame);
            
            // Generate obstacles
            function generateObstacle() {
                if (!gameActive) return;
                
                const obstacle = document.createElement('div');
                obstacle.className = 'obstacle';
                
                // Random lane
                const lane = Math.floor(Math.random() * 3);
                const positions = ['30%', '50%', '70%'];
                obstacle.style.left = positions[lane];
                
                // Add verb content
                const verbIndex = Math.floor(Math.random() * verbs.length);
                const verb = verbs[verbIndex];
                obstacle.textContent = verb.present;
                obstacle.dataset.correct = verb.past;
                
                document.querySelector('.city-background').appendChild(obstacle);
                
                // Remove obstacle after animation completes
                setTimeout(() => {
                    if (obstacle.parentNode) {
                        obstacle.parentNode.removeChild(obstacle);
                        
                        // Check if player collided with this obstacle
                        const obstacleRect = obstacle.getBoundingClientRect();
                        const playerRect = player.getBoundingClientRect();
                        
                        if (obstacleRect.bottom >= playerRect.top && 
                            obstacleRect.top <= playerRect.bottom &&
                            obstacleRect.right >= playerRect.left && 
                            obstacleRect.left <= playerRect.right) {
                            
                            // Collision detected
                            lives--;
                            updateLives();
                            
                            if (lives <= 0) {
                                gameOver();
                            }
                        }
                    }
                }, 3000);
            }
            
            // Start generating obstacles
            setInterval(generateObstacle, 1500);
            
            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>
